import streamlit as st
import os
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import gdown

# ≈öcie≈ºki i link
MODEL_DIR = "model"
MODEL_PATH = os.path.join(MODEL_DIR, "model.h5")
MODEL_URL = "https://drive.google.com/uc?id=1fLsy6SAk-cGi5c06XVegJPjxfb0Bclxc"  # link gdrive

# Pe≈Çna lista etykiet klas
class_labels = [
    "Acanthoscurria", "Amazonius germani", "Aphonopelma seemanni", "Augcephalus",
    "Brachypelma albiceps", "Brachypelma baumgarteni", "Brachypelma boehmei",
    "Brachypelma klaasi", "Brachypelma smithi", "Brachypelma vagans",
    "Bumba cabocla", "Caribena versicolor", "Chromatopelma cyaneopubescens",
    "Coremiocnemis tropix", "Cyclosternum fasciatum", "Cyriocosmus elegans",
    "Davus pentaloris", "Dolichothele diamantinensis", "Encyocratella olivacea",
    "Eupalaestrus campestratus", "Grammostola actaeon", "Grammostola alticeps",
    "Grammostola pulchra", "Grammostola rosea", "Hapalopus sp. Colombia",
    "Haplopelma lividum", "Lasiodora parahybana", "Lasiodora klugi",
    "Lasiodora difficilis", "Lasiodora spinipes", "Megaphobema mesomelas",
    "Nhandu chromatus", "Nhandu coloratovillosus", "Pamphobeteus antinous",
    "Pamphobeteus nigricolor", "Phormictopus cancerides", "Pterinochilus murinus",
    "Psalmopoeus irminia", "Psalmopoeus reduncus", "Schismatothele inflata",
    "Stromatopelma calceatum", "Theraphosa blondi", "Theraphosa stirmi",
    "Vitalius chromatus", "Xenesthis immanis"
]

def download_model():
    """Pobiera model, je≈õli jeszcze go nie ma."""
    if not os.path.exists(MODEL_PATH):
        os.makedirs(MODEL_DIR, exist_ok=True)
        with st.spinner('üì• Pobieranie modelu...'):
            gdown.download(MODEL_URL, MODEL_PATH, quiet=True)

@st.cache_resource
def load_trained_model():
    """≈Åaduje model Keras z dysku."""
    download_model()
    return load_model(MODEL_PATH)

model = load_trained_model()

def set_bg_hack_url():
    """Ustawia t≈Ço z obrazem."""
    st.markdown(
         f"""
         <style>
         .stApp {{
             background: url("https://i.imgur.com/DBGp1Yv.png");
             background-size: cover;
             background-position: top right 18vw;
             background-repeat: no-repeat;
         }}
         </style>
         """,
         unsafe_allow_html=True
     )

def tarantupedia_link(name):
    """Generuje link do tarantupedia.com"""
    parts = name.lower().split()
    if len(parts) == 1:
        return f"https://www.tarantupedia.com/theraphosinae/{parts[0]}"
    else:
        genus = parts[0]
        species = '-'.join(parts)
        return f"https://www.tarantupedia.com/theraphosinae/{genus}/{species}"

def main():
    set_bg_hack_url()

    lang = st.sidebar.selectbox("Language / Jƒôzyk", ["English", "Polski"])

    page = st.sidebar.radio(
        "Menu" if lang == "English" else "Menu",
        options=[
            "Prediction" if lang == "English" else "Predykcja",
            "Species List" if lang == "English" else "Lista gatunk√≥w",
            "Usage" if lang == "English" else "Instrukcja"
        ]
    )

    if page == ("Prediction" if lang == "English" else "Predykcja"):
        st.title("üï∑Ô∏è Theraphosidae Species Classifier" if lang == "English" else "üï∑Ô∏è Klasyfikator gatunk√≥w Theraphosidae")

        uploaded_file = st.file_uploader(
            "Upload an image (top view of full spider)" if lang == "English" else "Prze≈õlij zdjƒôcie (ca≈Çy pajƒÖk, widok z g√≥ry)",
            type=["jpg", "jpeg", "png"]
        )

        if uploaded_file is not None:
            img = image.load_img(uploaded_file, target_size=(224, 224))
            img_array = image.img_to_array(img)
            img_array = np.expand_dims(img_array, axis=0) / 255.0

            predictions = model.predict(img_array)
            predicted_index = np.argmax(predictions)
            predicted_label = class_labels[predicted_index]

            url = tarantupedia_link(predicted_label)
            info_text = "Click to learn more" if lang == "English" else "Kliknij, aby dowiedzieƒá siƒô wiƒôcej"

            st.image(img, caption="Uploaded Image", use_column_width=True)
            st.markdown(f"### ‚úÖ Prediction: [{predicted_label}]({url})")
            st.markdown(f"*{info_text}*")

    elif page == ("Species List" if lang == "English" else "Lista gatunk√≥w"):
        st.title("Recognized Species" if lang == "English" else "Rozpoznawane gatunki")
        st.write(
            "The model recognizes the following species and genera (mainly from the pet trade):"
            if lang == "English"
            else "Model rozpoznaje nastƒôpujƒÖce gatunki i rodzaje (g≈Ç√≥wnie popularne w handlu):"
        )
        st.write(", ".join(class_labels))

    elif page == ("Usage" if lang == "English" else "Instrukcja"):
        st.title("Usage Instructions" if lang == "English" else "Instrukcja u≈ºycia")
        if lang == "English":
            st.markdown("""
            - Upload a photo of the full spider, taken from above.
            - The app recognizes only the species listed in the Species List tab.
            - If the species is not in the list but its genus is, the app will likely identify the genus correctly but assign the species to one from the list.
            """)
        else:
            st.markdown("""
            - Prze≈õlij zdjƒôcie ca≈Çego pajƒÖka, zrobione z g√≥ry.
            - Aplikacja rozpoznaje tylko gatunki wypisane na li≈õcie gatunk√≥w.
            - W przypadku gatunk√≥w nieobecnych na li≈õcie, ale obecnych ich rodzaj√≥w, aplikacja najprawdopodobniej prawid≈Çowo rozpozna rodzaj, ale przypisze gatunek do jednego z dostƒôpnych na li≈õcie.
            """)

if __name__ == "__main__":
    main()
